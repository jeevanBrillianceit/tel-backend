name: Build on DockerHub and Deploy to AWS
on:
  push:
    branches:
      - main
env:
  DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
  DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}
  EC2_PRIVATE_KEY: ${{ secrets.EC2_PRIVATE_KEY }}
  AWS_INSTANCE_IP: "3.93.212.44"  # Replace with your actual EC2 instance IP
  DOCKERHUB_IMAGE: "jeevanbit/cicd-pipeline:latest"

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v2
        with:
          context: ./
          push: true
          dockerfile: ./Dockerfile
          tags: ${{ env.DOCKERHUB_IMAGE }}

  deploy:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Login to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ env.DOCKERHUB_USERNAME }}
          password: ${{ env.DOCKERHUB_TOKEN }}

      - name: Set permissions for private key
        run: |
          echo "${{ env.EC2_PRIVATE_KEY }}" > key.pem
          chmod 600 key.pem

      - name: Pull Docker image
        run: |
          ssh -o StrictHostKeyChecking=no -i key.pem ubuntu@${{ env.AWS_INSTANCE_IP }} 'sudo docker pull ${{ env.DOCKERHUB_IMAGE }}'

      - name: Stop running container
        run: |
          ssh -o StrictHostKeyChecking=no -i key.pem ubuntu@${{ env.AWS_INSTANCE_IP }} 'sudo docker stop cddemo || true'
          ssh -o StrictHostKeyChecking=no -i key.pem ubuntu@${{ env.AWS_INSTANCE_IP }} 'sudo docker rm cddemo || true'

      - name: Run new container
        run: |
          ssh -o StrictHostKeyChecking=no -i key.pem ubuntu@${{ env.AWS_INSTANCE_IP }} 'sudo docker run -d --name cddemo -p 80:3000 ${{ env.DOCKERHUB_IMAGE }}'
